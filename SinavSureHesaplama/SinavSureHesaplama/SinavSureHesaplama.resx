<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAOwAAADsAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAKQoKDdUEBAb3BQUH9wUFB/cFBQf3BQUH9wUFB/cFBQf3BQUH9wUF
        B/cFBQf3BQUH9wUFB/cFBQf3BQUH9wUFB/cFBQf3BQUH9wUFB/cFBQj5BgYJ+w0NFN0AAAApAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAICA3aWFiA/4CAuf+AgLn/gIC5/4CAuf+AgLn/gIC5/4CA
        uf+AgLn/gIC5/4CAuf+AgLn/gIC5/4CAuf+AgLn/gIC5/4CAuf+AgLn/gIC5/4CAuf90dLL/Skp3/wsL
        Ed8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQUFB/aAgLn/gIC5/4CAuf+AgLn/gIC5/4CA
        uf+AgLn/gIC5/4CAuf+AgLn/gIC5/4CAuf+AgLn/gIC5/4CAuf+AgLn/gIC5/4CAuf+AgLn/gIC5/3h4
        tf9sbK3/BgYJ+gAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACQkOwz4+W/ptbZ3/b2+g/29v
        oP9vb6D/b2+g/29voP9vb6D/b2+g/29voP9vb6D/b2+g/29voP9vb6D/eHit/4CAuf9ycqX/b2+g/29v
        oP9vb6D/YWGX/zY2Vv8LCxLJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASCgoNoAkJ
        Dd4CBQf9CiYu/AklLv0JJS7+CSUu/wklLv8JJS7/CSUu/wklLv8JJS7/CSUu/wklLv8VV27/KrPg/Qoq
        M/4IJi79BCcx/wIGCP4NDRToDg4UqAAAABIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAHAoiJvkC1P7/AtT+/wLU/v8C1P7/AtT+/wLU/v8C1P7/AtT+/wLU/v8C1P7/AtT+/wLU
        /v8C1P7/AtT+/wLR/f8Axvr/BiIp/gAAABwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        IPcAAAAbAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGiAg
        IPTi3uP/4t7j/+Le4//i3uP/4t7j/+Le4//i3uP/4t7j/+Le4//i3uP/4t7j/+Le4//i3uP/4dzh/9jT
        2f/W0Nf/ICAg9wAAABwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEgoK
        DZ8JCQ3eBgYG/SkoKfwpKCr9KSkq/iopK/8qKSv/Kikr/yopK/8qKSv/Kikr/yopK/8qKSv/Kikr/yop
        K/8pKSr+KSgq/SkoKfwGBgb9DQ0U6AwMFKYAAAASAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAJCQ7CPT1Z+m1tnf9vb6D/b2+g/29voP9vb6D/b2+g/29voP9vb6D/b2+g/29voP9vb6D/b2+g/29v
        oP9vb6D/b2+g/29voP9vb6D/b2+g/25un/9hYZf/NTVV/wwMEscAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAQUFB/aAgLn/gIC5/4CAuf+AgLn/gIC5/4CAuf+AgLn/gIC5/4CAuf+AgLn/gIC5/4CA
        uf+AgLn/gIC5/4CAuf+AgLn/gIC5/4CAuf+AgLn/gIC5/3h4tf9sbK3/BgYJ+gAAAAEAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAACAgN21lZgP+AgLn/gIC5/4CAuf+AgLn/gIC5/4CAuf+AgLn/gIC5/4CA
        uf+AgLn/gIC5/4CAuf+AgLn/gIC5/4CAuf+AgLn/gIC5/4CAuf+AgLn/dHSz/0tLeP8KChDgAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqCgoN1gQEBvcFBQf3BQUH9wUFB/cFBQf3BQUH9wUF
        B/cFBQf3BQUH9wUFB/cFBQf3BQUH9wUFB/cFBQf3BQUH9wUFB/cFBQf3BQUH9wUFCPkGBgn7DQ0S3wAA
        ACkAAAAAAAAAAAAAAAAAAAAA8AAAD/AAAA/gAAAH8AAAD/AAAA/8AAA//AAAP/wAAD/+AAB//gAAf/4A
        AH/+AAD//wAA//+AAf//wAP///AP///wD///wAP//4AB//8AAP//AAD//gAAf/4AAH/+AAB//AAAP/4A
        AD/8AAA/8AAAD/AAAA/gAAAH8AAAD/AAAA8=
</value>
  </data>
</root>